/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtquickcontrols2-customize.html
    \title Customizing Qt Quick Controls 2
    \brief A set of UI controls to create user interfaces in Qt Quick

    Qt Quick Controls 2 consist of a hierarchy (tree) of items. In order to
    provide a custom look and feel, the default QML implementation of each
    item can be replaced with a custom one.

    \section1 Customizing a Control

    Sometimes you'll want to create a "one-off" look for a specific part of
    your UI, and use a complete style everywhere else. Perhaps you're happy
    with the style you're using, but there's a certain button that has some
    special significance.

    The first way to create this button is to simply define it in-place,
    wherever it is needed. For example, perhaps you're not satisfied with the
    default style's Button having square corners. To make them rounded, you
    can override the \l {Control::}{background} item and set the radius
    property of Rectangle:

    \qml
    import QtQuick 2.6
    import QtQuick.Controls 2.0

    ApplicationWindow {
        width: 400
        height: 400
        visible: true

        Button {
            id: button
            text: "A Special Button"
            background: Rectangle {
                implicitWidth: 100
                implicitHeight: 40
                color: button.down ? "#d6d6d6" : "#f6f6f6"
                border.color: "#26282a"
                border.width: 1
                radius: 4
            }
        }
    }
    \endqml

    The second way to create the button is good if you plan to use your rounded
    button in several places. It involves moving the code into its own QML file
    within your project.

    For this approach, we'll copy the background code from the default style's
    \c Button.qml. This file can be found in the following path in your Qt
    installation:

    \c {$QTDIR/qml/QtQuick/Controls.2/Button.qml}

    After doing that, we'll simply add the following line:

    \code
    radius: 4
    \endcode

    To avoid confusion with the controls in the
    module itself, we'll call the file \c MyButton.qml. To use the control in
    your application, refer to it by its filename:

    \qml
    import QtQuick.Controls 2.0

    ApplicationWindow {
        MyButton {
            text: qsTr("A Special Button")
        }
    }
    \endqml

    The third way to create the button is a bit more structured, both in terms
    of where the file sits in the file system and how it is used in QML. First,
    copy an existing file as you did above, but this time, put it into a
    subfolder in your project named (for example) \c controls. To use the
    control, first import the folder into a namespace:

    \qml
    import QtQuick.Controls 2.0
    import "controls" as MyControls

    ApplicationWindow {
        MyControls.Button {
            text: qsTr("A Special Button")
        }
    }
    \endqml

    As you now have the \c MyControls namespace, you can name the controls after
    their actual counterparts in the Qt Quick Controls 2 module. You can repeat
    this process for any control that you wish to add.

    \section1 Creating a Custom Style

    There are several ways to go about creating your own styles. Below, we'll
    explain the various approaches.

    \section2 Definition of a Style

    In Qt Quick Controls 2, a style is essentially an interchangeable set of
    QML files within a single directory. There are two requirements for a style
    to be \l {Using Styles in Qt Quick Controls 2}{usable}:

    \list
    \li At least one QML file whose name matches a control (for example,
        \c Button.qml) must exist.

        The Default style will be used for any controls that aren't implemented.
    \li The files must be in a directory in the filesystem or in the
        \l {The Qt Resource System}{resource system}.

        For example, these are all valid paths to a style:

        \list
        \li \c {./myapp -style /home/absolute/path/to/my/style}
        \li \c {./myapp -style :/mystyle}
        \li \c {./myapp -style relative/path/to/my/style}
        \li \c {./myapp -style MyStyle}
        \endlist

        The third and fourth paths will be looked up within the QML engine's import path
        list. This is the same as what happens when you pass \c Material as the style,
        for example.
    \endlist

    What this means is that you can implement as many controls as you like for
    your custom style, and place them almost anywhere. It also allows users to
    create their own styles for your application.

    \section2 Style-specific C++ Extensions

    Sometimes you may need to use C++ to extend your custom style. There are two
    ways to expose such types to QML:

    \list
    \li If the style that uses the type is the only style used by an application,
        it's enough to register it with the QML engine via qmlRegisterType():

        \code
        qmlRegisterType<ACoolCppItem>("MyApp", 1, 0, "ACoolItem");
        \endcode

        See \l {Using C++ Data From QML} for more information about this.
    \li If the style that uses the type is one of many styles used by an
        application, it may be better to only register it when necessary. This
        is the point at which it would make sense to implement your own
        \l {Creating C++ Plugins for QML}{QML plugin}.

        Using a plugin as part of your style is not that much different from
        using a set of QML files. The only difference is that the plugin and
        its \c qmldir file must be present in the same directory as the QML
        files.
    \endlist

    \section3 Attached properties

    It is common for a style to have certain properties or attributes that
    apply to all controls. \l {Attached Properties and Attached Signal
    Handlers}{Attached properties} are a great way of extending an item in QML
    without having to modify any existing C++ belonging to that item. For
    example, both the \l {Material Style}{Material} and \l {Universal
    Style}{Universal} styles have an attached theme property that controls
    whether an item and its children will be rendered in a light or dark theme.

    As an example, let's add an attached property that controls elevation. Our
    style will illustrate the elevation with a drop shadow; the higher the
    elevation, the larger the shadow.

    The first step is to add a C++ type that stores the elevation. Since the
    type will be used for every control supported by our style, and because we
    may wish to add other attached properties later on, we'll call it
    MyStyle. Here is \c MyStyle.h:

    \code
    #ifndef MYSTYLE_H
    #define MYSTYLE_H

    #include <QObject>
    #include <QtQml>

    class MyStyle : public QObject
    {
        Q_OBJECT
        Q_PROPERTY(int elevation READ elevation WRITE setElevation NOTIFY elevationChanged)

    public:
        explicit MyStyle(QObject *parent = nullptr);

        static MyStyle *qmlAttachedProperties(QObject *object);

        int elevation() const;
        void setElevation(int elevation);

    signals:
        void elevationChanged();

    private:
        int m_elevation;
    };

    QML_DECLARE_TYPEINFO(MyStyle, QML_HAS_ATTACHED_PROPERTIES)

    #endif // MYSTYLE_H
    \endcode

    \c MyStyle.cpp:

    \code
    #include "mystyle.h"

    MyStyle::MyStyle(QObject *parent) :
        QObject(parent),
        m_elevation(0)
    {
    }

    MyStyle *MyStyle::qmlAttachedProperties(QObject *object)
    {
        return new MyStyle(object);
    }

    int MyStyle::elevation() const
    {
        return m_elevation;
    }

    void MyStyle::setElevation(int elevation)
    {
        if (elevation == m_elevation)
            return;

        m_elevation = elevation;
        emit elevationChanged();
    }
    \endcode

    The \c MyStyle type is special in the sense that it shouldn't be
    instantiated, but rather used for its attached properties. For that reason,
    we register it in the following manner:

    \code
    qmlRegisterUncreatableType<MyStyle>("MyStyle", 1, 0, "MyStyle", "MyStyle is an attached property");
    \endcode

    We then copy the existing default Button style, and add the code for a drop
    shadow (which was taken from the Material Button style). We modify that
    slightly to ensure that we:

    \list
    \li Don't bother using the drop shadow when the elevation is \c 0
    \li Change the shadow's color depending on whether or not the button has
        focus
    \li Make the size of the shadow depend on the elevation
    \endlist

    \code
        layer.enabled: control.enabled && control.MyStyle.elevation > 0
        layer.effect: DropShadow {
            verticalOffset: 1
            color: control.visualFocus ? "#330066ff" : "#aaaaaa"
            samples: control.MyStyle.elevation
            spread: 0.5
        }
    \endcode

    With that in place, we can try out our new elevation feature:

    \qml
    import QtQuick 2.6
    import QtQuick.Controls 2.0

    import MyStyle 1.0

    ApplicationWindow {
        id: window
        width: 400
        height: 400
        visible: true

        Row {
            spacing: 20
            anchors.centerIn: parent

            Button {
                text: "Button 1"
            }
            Button {
                text: "Button 2"
                MyStyle.elevation: 10
            }
        }
    }
    \endqml

    The end result:

    \image qtquickcontrols2-customize-buttons.png

    \section1 Customization Reference

    The following snippets present the default implementations of various
    items. These can be used as a starting point to implement a custom look and
    feel.

    \section2 Customizing BusyIndicator

        BusyIndicator consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{contentItem}.

        \section3 Background

            \image qtquickcontrols2-busyindicator-background.png

            BusyIndicator has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-busyindicator-contentItem.png

            \snippet BusyIndicator.qml contentItem


    \section2 Customizing Button

        Button consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-button-background.png

            \snippet Button.qml background

        \section3 Content item

            \image qtquickcontrols2-button-contentItem.png

            \snippet Button.qml contentItem


    \section2 Customizing CheckBox

        CheckBox consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{contentItem} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-checkbox-background.png

            CheckBox has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-checkbox-contentItem.png

            \snippet CheckBox.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-checkbox-indicator.png

            \snippet CheckBox.qml indicator


    \section2 Customizing CheckDelegate

        CheckDelegate consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{contentItem} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-checkdelegate-background.png

            \snippet CheckDelegate.qml background

        \section3 Content item

            \image qtquickcontrols2-checkdelegate-contentItem.png

            \snippet CheckDelegate.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-checkdelegate-indicator.png

            \snippet CheckDelegate.qml indicator


    \section2 Customizing ComboBox

        ComboBox consists of \l {Control::background}{background},
        \l {Control::contentItem}{content item}, \l {ComboBox::popup}{popup},
        and \l {ComboBox::delegate}{delegate}.

        \section3 Background

            \image qtquickcontrols2-combobox-background.png

            \snippet ComboBox.qml background

        \section3 Content item

            \image qtquickcontrols2-combobox-contentItem.png

            \snippet ComboBox.qml contentItem

        \section3 Popup

            \image qtquickcontrols2-combobox-popup.png

            \snippet ComboBox.qml popup

        \section3 Delegate

            \image qtquickcontrols2-combobox-delegate.png

            \snippet ComboBox.qml delegate


    \section2 Customizing Dial

        Dial consists of two visual items: \l {Control::background}{background}
        and \l {Dial::handle}{handle}.

        \section3 Background

            \image qtquickcontrols2-dial-background.png

            \snippet Dial.qml background

        \section3 Indicator

            \image qtquickcontrols2-dial-handle.png

            \snippet Dial.qml handle


    \section2 Customizing Drawer

        Drawer can have a visual \l {Control::background}{background}
        item.

        \section3 Background

            \snippet Drawer.qml background


    \section2 Customizing Frame

        Frame consists of one visual item: \l {Control::background}{background}.

        \section3 Background

            \image qtquickcontrols2-frame-background.png

            \snippet Frame.qml background


    \section2 Customizing GroupBox

        GroupBox consists of two visual items: \l {Control::background}{background}
        and \l {GroupBox::label}{label}.

        \section3 Background

            \image qtquickcontrols2-groupbox-background.png

            \snippet GroupBox.qml background

        \section3 Label

            \image qtquickcontrols2-groupbox-label.png

            \snippet GroupBox.qml label


    \section2 Customizing ItemDelegate

        ItemDelegate consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{content item} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-itemdelegate-background.png

            \snippet ItemDelegate.qml background

        \section3 Content item

            \image qtquickcontrols2-itemdelegate-contentItem.png

            \snippet ItemDelegate.qml contentItem

        \section3 Indicator

            ItemDelegate has no indicator item by default.


    \section2 Customizing Label

        Label can have a visual \l {Label::background}{background} item.

        \section3 Background

            \image qtquickcontrols2-label-background.png

            Label has no background item by default.


    \section2 Customizing Menu

        Menu consists of a \l {Popup::}{contentItem}.

        \section3 Content item

            \image qtquickcontrols2-menu-contentItem.png

            \snippet Menu.qml contentItem


    \section2 Customizing MenuItem

        MenuItem can be customized in the same manner as
        \l {Customizing Button}{Button}.


    \section2 Customizing PageIndicator

        PageIndicator consists of a \l {Control::background}{background}, \l {Control::contentItem}{content item}, and \l {PageIndicator::delegate}{delegate}.

        \section3 Background

            \image qtquickcontrols2-pageindicator-background.png

        PageIndicator has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-pageindicator-contentItem.png

            \snippet PageIndicator.qml contentItem

        \section3 Delegate

            \image qtquickcontrols2-pageindicator-delegate.png

            \snippet PageIndicator.qml delegate


    \section2 Customizing Pane

        Pane consists of a \l {Control::background}{background}.

        \section3 Background

            \image qtquickcontrols2-pane-background.png

            \snippet Pane.qml background


    \section2 Customizing ProgressBar

        ProgressBar consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-progressbar-background.png

            \snippet ProgressBar.qml background

        \section3 Content item

            \image qtquickcontrols2-progressbar-contentItem.png

            \snippet ProgressBar.qml contentItem


    \section2 Customizing RadioButton

        RadioButton consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{content item} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-radiobutton-background.png

            RadioButton has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-radiobutton-contentItem.png

            \snippet RadioButton.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-radiobutton-indicator.png

            \snippet RadioButton.qml indicator


    \section2 Customizing RadioDelegate

        RadioDelegate consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{contentItem} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-radiodelegate-background.png

            \snippet RadioDelegate.qml background

        \section3 Content item

            \image qtquickcontrols2-radiodelegate-contentItem.png

            \snippet RadioDelegate.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-radiodelegate-indicator.png

            \snippet RadioDelegate.qml indicator


    \section2 Customizing RangeSlider

        RangeSlider consists of three visual items:
        \l {Control::background}{background},
        \l {RangeSlider::first}{first.handle} and
        \l {RangeSlider::second.handle}{second.handle}.

        \section3 Background

            \image qtquickcontrols2-rangeslider-background.png

            \snippet RangeSlider.qml background

        \section3 First Handle

            \image qtquickcontrols2-rangeslider-first-handle.png

            \snippet RangeSlider.qml firstHandle

        \section3 Second Handle

            \image qtquickcontrols2-rangeslider-second-handle.png

            \snippet RangeSlider.qml secondHandle


    \section2 Customizing ScrollBar

        ScrollBar consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-scrollbar-background.png

            ScrollBar has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-scrollbar-contentItem.png

            \snippet ScrollBar.qml contentItem


    \section2 Customizing ScrollIndicator

        ScrollIndicator consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-scrollindicator-background.png

            ScrollIndicator has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-scrollindicator-contentItem.png

            \snippet ScrollIndicator.qml contentItem


    \section2 Customizing Slider

        Slider consists of two visual items: \l {Control::background}{background},
        and \l {Slider::handle}{handle}.

        \section3 Background

            \image qtquickcontrols2-slider-background.png

            \snippet Slider.qml background

        \section3 Handle

            \image qtquickcontrols2-slider-handle.png

            \snippet Slider.qml handle


    \section2 Customizing SpinBox

        SpinBox consists of four visual items: \l {Control::background}{background},
        \l {Control::contentItem}{contentItem}, \l {SpinBox::up.indicator}{up indicator},
        and \l {SpinBox::down.indicator}{down indicator}.

        \section3 Background

            \image qtquickcontrols2-spinbox-background.png

            \snippet SpinBox.qml background

        \section3 Content item

            \image qtquickcontrols2-spinbox-contentItem.png

            \snippet SpinBox.qml contentItem

        \section3 Down indicator

            \image qtquickcontrols2-spinbox-down.png

            \snippet SpinBox.qml down.indicator

        \section3 Up indicator

            \image qtquickcontrols2-spinbox-up.png

            \snippet SpinBox.qml up.indicator


    \section2 Customizing StackView

        StackView can have a visual \l {Control::background}{background}
        item, and it allows customizing the transitions that are used for
        push, pop, and replace operations.

        \section3 Push enter

            \snippet StackView.qml pushEnter

        \section3 Push exit

            \snippet StackView.qml pushExit

        \section3 Pop enter

            \snippet StackView.qml popEnter

        \section3 Pop exit

            \snippet StackView.qml popExit

        \section3 Replace enter

            \snippet StackView.qml replaceEnter

        \section3 Replace exit

            \snippet StackView.qml replaceExit


    \section2 Customizing SwipeDelegate

        SwipeDelegate consists of five visual items: \l {Control::background}{background},
        \l {Control::contentItem}{content item}, \l {AbstractButton::indicator}{indicator},
        \c exposure.left, and \c exposure.right.

        \section3 Background

            \image qtquickcontrols2-swipedelegate-background.png

            \snippet SwipeDelegate.qml background

        \section3 Content item

            \image qtquickcontrols2-swipedelegate-contentItem.png

            \snippet SwipeDelegate.qml contentItem

        \section3 Indicator

            SwipeDelegate has no indicator item by default.

        \section3 Left, right, and behind

            \image qtquickcontrols2-swipedelegate.gif

            By default, there are no left, right, or behind items defined.


    \section2 Customizing SwipeView

        SwipeView can have a visual \l {Control::background}{background}
        item. The navigation is implemented by the \l {Control::contentItem}
        {content item}.

        \section3 Background

        SwipeView has no background item by default.

        \section3 Content item

        \snippet SwipeView.qml contentItem


    \section2 Customizing Switch

        Switch consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{content item} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-switch-background.png

            Switch has no background item by default.

        \section3 Content item

            \image qtquickcontrols2-switch-contentItem.png

            \snippet Switch.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-switch-indicator.png

            \snippet Switch.qml indicator


    \section2 Customizing SwitchDelegate

        SwitchDelegate consists of three visual items: \l {Control::background}{background},
        \l {Control::contentItem}{contentItem} and \l {AbstractButton::indicator}{indicator}.

        \section3 Background

            \image qtquickcontrols2-switchdelegate-background.png

            \snippet SwitchDelegate.qml background

        \section3 Content item

            \image qtquickcontrols2-switchdelegate-contentItem.png

            \snippet SwitchDelegate.qml contentItem

        \section3 Indicator

            \image qtquickcontrols2-switchdelegate-indicator.png

            \snippet SwitchDelegate.qml indicator


    \section2 Customizing TabBar

        TODO


    \section2 Customizing TabButton

        TODO


    \section2 Customizing TextArea

        TODO


    \section2 Customizing TextField

        TextField offers a customizable \l {TextField::background}{background} item.

        \section3 Background

            \image qtquickcontrols2-textfield-background.png

            \snippet TextField.qml background


    \section2 Customizing ToolBar

        ToolBar consists of one visual item: \l {Control::background}{background}.

        \section3 Background

            \image qtquickcontrols2-toolbar-background.png

            \snippet ToolBar.qml background


    \section2 Customizing ToolButton

        ToolButton consists of two visual items: \l {Control::background}{background}
        and \l {Control::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-toolbutton-background.png

            \snippet ToolButton.qml background

        \section3 Content item

            \image qtquickcontrols2-toolbutton-contentItem.png

            \snippet ToolButton.qml contentItem


    \section2 Customizing ToolTip

        ToolTip consists of two visual items: \l {Popup::background}{background}
        and \l {Popup::contentItem}{content item}.

        \section3 Background

            \image qtquickcontrols2-tooltip-background.png

            \snippet ToolTip.qml background

        \section3 Content item

            \image qtquickcontrols2-tooltip-contentItem.png

            \snippet ToolTip.qml contentItem


    \section2 Customizing Tumbler

        Tumbler consists of three visual items:
        \l {Control::background}{background},
        \l {Control::contentItem}{contentItem}, and
        \l {Tumbler::delegate}{delegate}.

        \section3 Background

            \image qtquickcontrols2-tumbler-background.png

            Tumbler has no background item by default.

        \section3 Content Item

            \image qtquickcontrols2-tumbler-contentItem.png

            \snippet Tumbler.qml contentItem

        \section3 Delegate

            \image qtquickcontrols2-tumbler-delegate.png

            \snippet Tumbler.qml delegate
*/
